#version 460 core

#define PI 3.14159265359
#define MAX_LIGHTS 12000

layout (local_size_x = 16, local_size_y = 16) in;

struct PointLight
{
    vec3 color;
    float radius;
    vec3 position;
};

layout (binding = 0, rgba32f) uniform readonly  image2D gPosition;
layout (binding = 1, rgba16f) uniform readonly  image2D gNormal;
layout (binding = 2, rgba16f) uniform readonly  image2D gAlbedo;
layout (binding = 3, rgba16f) uniform readonly  image2D gMetallicRoughness;
layout (binding = 4, rgba32f) uniform writeonly image2D gOutput;
layout (std430, binding = 5) buffer LightsBuffer
{
    PointLight gPointLights[];
};

uniform mat4 projection;
uniform mat4 view;
uniform vec3 viewPos;

uniform int numLights;
uniform int maxLightsPerTile;
uniform int workGroupSize;
uniform int screenWidth;
uniform int screenHeight;

shared uint sVisibleLightIndices[MAX_LIGHTS];
shared int sNumVisibleLights = 0;

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

float distributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float num = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return num / denom;
}

float geometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}

float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = geometrySchlickGGX(NdotV, roughness);
    float ggx1 = geometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

void main()
{
    vec2 center = vec2(screenWidth, screenHeight) / float(2 * workGroupSize);
    vec2 offset = center - vec2(gl_WorkGroupID.xy);

    // Extract the viewing frustum planes (normals)
    vec4 column0 = vec4(-projection[0][0] * center.x,  projection[0][1],            offset.x, projection[0][3]);
    vec4 column1 = vec4( projection[1][0]           , -projection[1][1] * center.y, offset.y, projection[1][3]);
    vec4 column3 = vec4( projection[3][0],             projection[3][1],            -1.0f,    projection[3][3]);

    vec4 frustrumPlanes[4];
    frustrumPlanes[0] = column3 + column0; // Left
    frustrumPlanes[1] = column3 - column0; // Right
    frustrumPlanes[2] = column3 - column1; // Top
    frustrumPlanes[3] = column3 + column1; // Bottom
    for (uint i = 0; i < 4; ++i)
    {
        frustrumPlanes[i] /= length(frustrumPlanes[i].xyz);
    }

    int numThreads = workGroupSize * workGroupSize;
    int numPasses = (numLights + numThreads - 1) / numThreads;
    for (int i = 0; i < numPasses; ++i)
    {
        uint lightIndex = min(i * numThreads + gl_LocalInvocationIndex, numLights - 1);
        PointLight pointLight = gPointLights[lightIndex];
        if (sNumVisibleLights < maxLightsPerTile)
        {
            bool inFrustrum = true;
            for (int j = 3; j >= 0 && inFrustrum; --j)
            {
                // Distance of the point from the plane
                float dist = dot(frustrumPlanes[j], view * vec4(pointLight.position, 1.0f));
                // Checks if the vector is contained inside the viewing frustrum
                inFrustrum = -pointLight.radius <= dist;
            }
            if (inFrustrum)
            {
                int mem = atomicAdd(sNumVisibleLights, 1);
                sVisibleLightIndices[mem] = lightIndex;
            }
        }
    }

    barrier();

    ivec2 texelSpaceTexCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 texCoords = vec2(texelSpaceTexCoords.x / screenWidth, texelSpaceTexCoords.y / screenHeight);
    vec4 fragColor = vec4(0.0, 0.0, 0.0, 1.0);

    vec3 fragPos = imageLoad(gPosition, texelSpaceTexCoords).xyz;
    vec3 normal = imageLoad(gNormal, texelSpaceTexCoords).xyz;
    vec3 albedo = imageLoad(gAlbedo, texelSpaceTexCoords).rgb;
    float metallic = imageLoad(gMetallicRoughness, texelSpaceTexCoords).b;
    float roughness = imageLoad(gMetallicRoughness, texelSpaceTexCoords).g;

    vec3 N = normalize(normal);
    vec3 V = normalize(viewPos - fragPos);

    vec3 Lo = vec3(0.0);

    for (int i = 0; i < sNumVisibleLights; ++i)
    {
        PointLight light = gPointLights[sVisibleLightIndices[i]];
        vec3 L = normalize(light.position - fragPos);
        vec3 H = normalize(V + L);

        float dist = length(light.position - fragPos);
        float attenuation = 1.0 / (dist * dist);
        vec3 radiance = light.color * attenuation;

        vec3 F0 = vec3(0.04);
        F0 = mix(F0, albedo, metallic);
        vec3 F = fresnelSchlick(max(dot(H,V), 0.0), F0);

        float NDF = distributionGGX(N, H, roughness);
        float G = geometrySmith(N, V, L, roughness);

        vec3 numerator = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
        vec3 specular = numerator / denominator;

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        
        kD *= 1.0 - metallic;

        float NdotL = max(dot(N, L), 0.0);
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;
    }

    vec3 ambient = vec3(0.03) * albedo;
    vec3 color = ambient + Lo;

    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2));

    fragColor = vec4(color, 1.0);
    
    imageStore(gOutput, texelSpaceTexCoords, fragColor);

    double test = double(sNumVisibleLights)/double(maxLightsPerTile);
    vec3 black = vec3(0, 0, 0);
    vec3 blue = vec3(0, 0, 1);
    imageStore(gOutput, texelSpaceTexCoords, vec4(mix(black,blue,test), 0.5));
}
