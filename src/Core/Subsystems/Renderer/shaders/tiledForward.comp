#version 460 core

#define PI 3.14159265359
#define MAX_LIGHTS_PER_TILE 128

layout (local_size_x = 16, local_size_y = 16) in;

struct PointLight
{
    vec3    color;
    float   radius;
    vec3    position;
};

struct Plane
{
    vec3    N; // Normal
    float   d; // Distance to origin
};


struct Sphere
{
    vec3    c; // Center point
    float   r; // Radius 
};

struct Frustum
{
    Plane planes[4]; // left, right, top, bottom
};

layout (binding = 0, rgba32f) uniform readonly  image2D gDepth;
layout (binding = 1, rg32f)   uniform           image2D gLightGrid;
layout (binding = 2, rgba32f) uniform writeonly image2D gOutput;
layout (std430, binding = 3) buffer LightIndexCounter
{
    uint gLightIndexCounter[];
};
layout (std430, binding = 4) buffer LightIndexList
{
    uint gLightIndexList[];
};
layout (std430, binding = 5) buffer LightsBuffer
{
    PointLight gPointLights[];
};
layout (std430, binding = 6) buffer FrustumBuffer
{
    Frustum gFrustumBuffer[];
};

uniform mat4 invProjection;
uniform mat4 view;

uniform int numLights;
uniform int workGroupSize;
uniform int screenWidth;
uniform int screenHeight;

shared uint uMinDepth;
shared uint uMaxDepth;

shared uint lightCount;
shared uint lightIndexStartOffset;
shared uint lightList[MAX_LIGHTS_PER_TILE];

shared Frustum groupFrustum;

// Convert clip space coordinates to view space
vec4 clipToView(vec4 clip)
{
    vec4 view = clip * invProjection;
    view = view / view.w;
    return view;
}

bool sphereInsidePlane(Sphere sphere, Plane plane)
{
    return dot(plane.N, sphere.c) - plane.d < -sphere.r;
}

bool sphereInsideFrustum(Sphere sphere, Frustum frustum, float zNear, float zFar)
{
    bool result = true;

    // Check if in range of depth
    if (sphere.c.z - sphere.r > zFar || sphere.c.z + sphere.r < zNear)
    {
        result = false;
    }
    
    // Check if in frustum with its 4 planes
    for (int i = 0; i < 4 && result; ++i)
    {
        if (sphereInsidePlane(sphere, frustum.planes[i]))
        {
            result = false;
        }
    }

    return result;
}

// Atomic add a light index to the light list of a work group
void appendLight(uint lightIndex)
{
    uint i;
    i = atomicAdd(lightCount, 1);
    if (i < MAX_LIGHTS_PER_TILE)
    {
        lightList[i] = lightIndex;
    }
}

void main()
{


    // Light Culling
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    float fDepth = imageLoad(gDepth, texCoord).r;
    uint uDepth = floatBitsToUint(fDepth);

    if (gl_LocalInvocationIndex == 0)
    {
        uMinDepth = 0xffffffff;
        uMaxDepth = 0;
        lightCount = 0;
        groupFrustum = gFrustumBuffer[gl_WorkGroupID.x + gl_WorkGroupID.y * workGroupSize];
    }

    barrier();

    atomicMin(uMinDepth, uDepth);
    atomicMax(uMaxDepth, uDepth);

    barrier();

    float fMinDepth = uintBitsToFloat(uMinDepth);
    float fMaxDepth = uintBitsToFloat(uMaxDepth);

    float minDepthVS = clipToView(vec4(0, 0, fMinDepth, 1)).z;
    float maxDepthVS = clipToView(vec4(0, 0, fMaxDepth, 1)).z;
    float nearClipVS = clipToView(vec4(0, 0, 0, 1)).z;

    Plane minPlane;
    minPlane.N = vec3(0, 0, 1);
    minPlane.d = minDepthVS;

    for (uint i = gl_LocalInvocationIndex; i < numLights; i += workGroupSize * workGroupSize)
    {
        PointLight pointLight = gPointLights[i];
        Sphere sphere;
        sphere.c = pointLight.position.xyz;
        sphere.r = pointLight.radius;
        if (sphereInsideFrustum(sphere, groupFrustum, nearClipVS, maxDepthVS))
        {
            if (!sphereInsidePlane(sphere, minPlane))
            {
                appendLight(i);
            }
        }
    }

    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        lightIndexStartOffset = atomicAdd(gLightIndexCounter[0], lightCount);
        imageStore(gLightGrid, texCoord, uvec4(uvec2(lightIndexStartOffset, lightCount), 0, 0));
    }

    barrier();

    for (uint i = gl_LocalInvocationIndex; i < lightCount; i += workGroupSize * workGroupSize)
    {
        gLightIndexList[lightIndexStartOffset + i] = lightList[i];
    }

    barrier();

    imageStore(gOutput, texCoord, vec4(0, 0, float(lightCount)/MAX_LIGHTS_PER_TILE, 0.25));
}
